{"version":3,"file":"index.js","sources":["../../src/helpers.js","../../src/rows.js","../../src/columns.js","../../src/table.js","../../src/config.js","../../src/datatable.js","../../src/convert/csv.js","../../src/convert/json.js","../../src/export/csv.js","../../src/export/json.js","../../src/export/sql.js","../../src/export/txt.js","../../src/editing/config.js","../../src/editing/editor.js","../../src/editing/helpers.js"],"sourcesContent":["/**\n * Check is item is object\n * @return {Boolean}\n */\nexport const isObject = val => Object.prototype.toString.call(val) === \"[object Object]\"\n\n/**\n * Check for valid JSON string\n * @param  {String}   str\n * @return {Boolean|Array|Object}\n */\nexport const isJson = str => {\n    let t = !1\n    try {\n        t = JSON.parse(str)\n    } catch (e) {\n        return !1\n    }\n    return !(null === t || (!Array.isArray(t) && !isObject(t))) && t\n}\n\n/**\n * Create DOM element node\n * @param  {String}   nodeName nodeName\n * @param  {Object}   attrs properties and attributes\n * @return {Object}\n */\nexport const createElement = (nodeName, attrs) => {\n    const dom = document.createElement(nodeName)\n    if (attrs && \"object\" == typeof attrs) {\n        for (const attr in attrs) {\n            if (\"html\" === attr) {\n                dom.innerHTML = attrs[attr]\n            } else {\n                dom.setAttribute(attr, attrs[attr])\n            }\n        }\n    }\n    return dom\n}\n\nexport const flush = el => {\n    if (el instanceof NodeList) {\n        el.forEach(e => flush(e))\n    } else {\n        el.innerHTML = \"\"\n    }\n}\n\n/**\n * Create button helper\n * @param  {String}   class\n * @param  {Number}   page\n * @param  {String}   text\n * @return {Object}\n */\nexport const button = (className, page, text) => createElement(\n    \"li\",\n    {\n        class: className,\n        html: `<a href=\"#\" data-page=\"${page}\">${text}</a>`\n    }\n)\n\n/**\n * Bubble sort algorithm\n */\nexport const sortItems = (a, b) => {\n    let c\n    let d\n    if (1 === b) {\n        c = 0\n        d = a.length\n    } else {\n        if (b === -1) {\n            c = a.length - 1\n            d = -1\n        }\n    }\n    for (let e = !0; e;) {\n        e = !1\n        for (let f = c; f != d; f += b) {\n            if (a[f + b] && a[f].value > a[f + b].value) {\n                const g = a[f]\n                const h = a[f + b]\n                const i = g\n                a[f] = h\n                a[f + b] = i\n                e = !0\n            }\n        }\n    }\n    return a\n}\n\n/**\n * Pager truncation algorithm\n */\nexport const truncate = (a, b, c, d, ellipsis) => {\n    d = d || 2\n    let j\n    const e = 2 * d\n    let f = b - d\n    let g = b + d\n    const h = []\n    const i = []\n    if (b < 4 - d + e) {\n        g = 3 + e\n    } else if (b > c - (3 - d + e)) {\n        f = c - (2 + e)\n    }\n    for (let k = 1; k <= c; k++) {\n        if (1 == k || k == c || (k >= f && k <= g)) {\n            const l = a[k - 1]\n            l.classList.remove(\"active\")\n            h.push(l)\n        }\n    }\n    h.forEach(c => {\n        const d = c.children[0].getAttribute(\"data-page\")\n        if (j) {\n            const e = j.children[0].getAttribute(\"data-page\")\n            if (d - e == 2) i.push(a[e])\n            else if (d - e != 1) {\n                const f = createElement(\"li\", {\n                    class: \"ellipsis\",\n                    html: `<a href=\"#\">${ellipsis}</a>`\n                })\n                i.push(f)\n            }\n        }\n        i.push(c)\n        j = c\n    })\n\n    return i\n}\n","import {createElement} from \"./helpers\"\n/**\n * Rows API\n * @param {Object} instance DataTable instance\n * @param {Array} rows\n */\nexport class Rows {\n    constructor(dt) {\n        this.dt = dt\n\n        this.cursor = false\n    }\n\n    /**\n     * Build a new row\n     * @param  {Array} row\n     * @return {HTMLElement}\n     */\n    build(row) {\n        const tr = createElement(\"tr\")\n\n        let headings = this.dt.headings\n\n        if (!headings.length) {\n            headings = row.map(() => \"\")\n        }\n\n        headings.forEach((h, i) => {\n            const td = createElement(\"td\")\n\n            // Fixes #29\n            if (!row[i] || !row[i].length) {\n                row[i] = \"\"\n            }\n\n            td.innerHTML = row[i]\n\n            td.data = row[i]\n\n            tr.appendChild(td)\n        })\n\n        return tr\n    }\n\n    setCursor(row=false) {\n        let oldCursor\n        Array.from(this.dt.dom.rows).forEach(row => {\n            oldCursor = row\n            row.classList.remove(\"dataTable-cursor\")\n        })\n        if (row) {\n            row.classList.add(\"dataTable-cursor\")\n            this.cursor = row\n            if (this.dt.options.scrollY) {\n                this.cursor.scrollIntoView({block: \"nearest\"})\n            }\n            this.dt.emit(\"datatable.cursormove\", this.cursor, oldCursor)\n        }\n    }\n\n    render(row) {\n        return row\n    }\n\n    /**\n     * Add new row\n     * @param {Array} select\n     */\n    add(data) {\n        if (Array.isArray(data)) {\n            const dt = this.dt\n            // Check for multiple rows\n            if (Array.isArray(data[0])) {\n                data.forEach(row => {\n                    dt.data.push(this.build(row))\n                })\n            } else {\n                dt.data.push(this.build(data))\n            }\n\n            // We may have added data to an empty table\n            if ( dt.data.length ) {\n                dt.hasRows = true\n            }\n\n\n            this.update()\n\n            dt.columns.rebuild()\n        }\n\n    }\n\n    /**\n     * Remove row(s)\n     * @param  {Array|Number} select\n     * @return {Void}\n     */\n    remove(select) {\n        const dt = this.dt\n\n        if (Array.isArray(select)) {\n            // Remove in reverse otherwise the indexes will be incorrect\n            select.sort((a, b) => b - a)\n\n            select.forEach(row => {\n                dt.data.splice(row, 1)\n            })\n        } else if (select == \"all\") {\n            dt.data = []\n        } else {\n            dt.data.splice(select, 1)\n        }\n\n        // We may have emptied the table\n        if ( !dt.data.length ) {\n            dt.hasRows = false\n        }\n\n        this.update()\n        dt.columns.rebuild()\n    }\n\n    /**\n     * Update row indexes\n     * @return {Void}\n     */\n    update() {\n        this.dt.data.forEach((row, i) => {\n            row.dataIndex = i\n        })\n    }\n\n    /**\n     * Find index of row by searching for a value in a column\n     * @param  {Number} columnIndex\n     * @param  {String} value\n     * @return {Number}\n     */\n    findRowIndex(columnIndex, value) {\n        // returns row index of first case-insensitive string match\n        // inside the td innerText at specific column index\n        return this.dt.data.findIndex(\n            tr => tr.children[columnIndex].innerText.toLowerCase().includes(String(value).toLowerCase())\n        )\n    }\n\n    /**\n     * Find index, row, and column data by searching for a value in a column\n     * @param  {Number} columnIndex\n     * @param  {String} value\n     * @return {Object}\n     */\n    findRow(columnIndex, value) {\n        // get the row index\n        const index = this.findRowIndex(columnIndex, value)\n        // exit if not found\n        if (index < 0) {\n            return {\n                index: -1,\n                row: null,\n                cols: []\n            }\n        }\n        // get the row from data\n        const row = this.dt.data[index]\n        // return innerHTML of each td\n        const cols = [...row.cells].map(r => r.innerHTML)\n        // return everything\n        return {\n            index,\n            row,\n            cols\n        }\n    }\n\n    /**\n     * Update a row with new data\n     * @param  {Number} select\n     * @param  {Array} data\n     * @return {Void}\n     */\n    updateRow(select, data) {\n        const row = this.build(data)\n        this.dt.data.splice(select, 1, row)\n        this.update()\n        this.dt.columns.rebuild()\n    }\n}\n","import {sortItems} from \"./helpers\"\n\n\nexport class Columns {\n    constructor(dt) {\n        this.dt = dt\n    }\n\n    /**\n     * Swap two columns\n     * @return {Void}\n     */\n    swap(columns) {\n        if (columns.length && columns.length === 2) {\n            const cols = []\n\n            // Get the current column indexes\n            this.dt.headings.forEach((h, i) => {\n                cols.push(i)\n            })\n\n            const x = columns[0]\n            const y = columns[1]\n            const b = cols[y]\n            cols[y] = cols[x]\n            cols[x] = b\n\n            this.order(cols)\n        }\n    }\n\n    /**\n     * Reorder the columns\n     * @return {Array} columns  Array of ordered column indexes\n     */\n    order(columns) {\n        let a\n        let b\n        let c\n        let d\n        let h\n        let s\n        let cell\n\n        const temp = [\n            [],\n            [],\n            [],\n            []\n        ]\n\n        const dt = this.dt\n\n        // Order the headings\n        columns.forEach((column, x) => {\n            h = dt.headings[column]\n            s = h.getAttribute(\"data-sortable\") !== \"false\"\n            a = h.cloneNode(true)\n            a.originalCellIndex = x\n            a.sortable = s\n\n            temp[0].push(a)\n\n            if (!dt.hiddenColumns.includes(column)) {\n                b = h.cloneNode(true)\n                b.originalCellIndex = x\n                b.sortable = s\n\n                temp[1].push(b)\n            }\n        })\n\n        // Order the row cells\n        dt.data.forEach((row, i) => {\n            c = row.cloneNode(false)\n            d = row.cloneNode(false)\n\n            c.dataIndex = d.dataIndex = i\n\n            if (row.searchIndex !== null && row.searchIndex !== undefined) {\n                c.searchIndex = d.searchIndex = row.searchIndex\n            }\n\n            // Append the cell to the fragment in the correct order\n            columns.forEach(column => {\n                cell = row.cells[column].cloneNode(true)\n                cell.data = row.cells[column].data\n                c.appendChild(cell)\n\n                if (!dt.hiddenColumns.includes(column)) {\n                    cell = row.cells[column].cloneNode(true)\n                    cell.data = row.cells[column].data\n                    d.appendChild(cell)\n                }\n            })\n\n            temp[2].push(c)\n            temp[3].push(d)\n        })\n\n        dt.headings = temp[0]\n        dt.activeHeadings = temp[1]\n\n        dt.data = temp[2]\n        dt.activeRows = temp[3]\n\n        // Update\n        dt.update()\n    }\n\n    /**\n     * Hide columns\n     * @return {Void}\n     */\n    hide(columns) {\n        if (columns.length) {\n            const dt = this.dt\n\n            columns.forEach(column => {\n                if (!dt.hiddenColumns.includes(column)) {\n                    dt.hiddenColumns.push(column)\n                }\n            })\n\n            this.rebuild()\n        }\n    }\n\n    /**\n     * Show columns\n     * @return {Void}\n     */\n    show(columns) {\n        if (columns.length) {\n            let index\n            const dt = this.dt\n\n            columns.forEach(column => {\n                index = dt.hiddenColumns.indexOf(column)\n                if (index > -1) {\n                    dt.hiddenColumns.splice(index, 1)\n                }\n            })\n\n            this.rebuild()\n        }\n    }\n\n    /**\n     * Check column(s) visibility\n     * @return {Boolean}\n     */\n    visible(columns) {\n        let cols\n        const dt = this.dt\n\n        columns = columns || dt.headings.map(th => th.originalCellIndex)\n\n        if (!isNaN(columns)) {\n            cols = !dt.hiddenColumns.includes(columns)\n        } else if (Array.isArray(columns)) {\n            cols = []\n            columns.forEach(column => {\n                cols.push(!dt.hiddenColumns.includes(column))\n            })\n        }\n\n        return cols\n    }\n\n    /**\n     * Add a new column\n     * @param {Object} data\n     */\n    add(data) {\n        let td\n        const th = document.createElement(\"th\")\n\n        if (!this.dt.headings.length) {\n            this.dt.insert({\n                headings: [data.heading],\n                data: data.data.map(i => [i])\n            })\n            this.rebuild()\n            return\n        }\n\n        if (!this.dt.hiddenHeader) {\n            if (data.heading.nodeName) {\n                th.appendChild(data.heading)\n            } else {\n                th.innerHTML = data.heading\n            }\n        } else {\n            th.innerHTML = \"\"\n        }\n\n        this.dt.headings.push(th)\n\n        this.dt.data.forEach((row, i) => {\n            if (data.data[i]) {\n                td = document.createElement(\"td\")\n\n                if (data.data[i].nodeName) {\n                    td.appendChild(data.data[i])\n                } else {\n                    td.innerHTML = data.data[i]\n                }\n\n                td.data = td.innerHTML\n\n                if (data.render) {\n                    td.innerHTML = data.render.call(this, td.data, td, row)\n                }\n\n                row.appendChild(td)\n            }\n        })\n\n        if (data.type) {\n            th.setAttribute(\"data-type\", data.type)\n        }\n        if (data.format) {\n            th.setAttribute(\"data-format\", data.format)\n        }\n\n        if (data.hasOwnProperty(\"sortable\")) {\n            th.sortable = data.sortable\n            th.setAttribute(\"data-sortable\", data.sortable === true ? \"true\" : \"false\")\n        }\n\n        this.rebuild()\n\n        this.dt.renderHeader()\n    }\n\n    /**\n     * Remove column(s)\n     * @param  {Array|Number} select\n     * @return {Void}\n     */\n    remove(select) {\n        if (Array.isArray(select)) {\n            // Remove in reverse otherwise the indexes will be incorrect\n            select.sort((a, b) => b - a)\n            select.forEach(column => this.remove(column))\n        } else {\n            this.dt.headings.splice(select, 1)\n\n            this.dt.data.forEach(row => {\n                row.removeChild(row.cells[select])\n            })\n        }\n\n        this.rebuild()\n    }\n\n    /**\n     * Filter by column\n     * @param  {int} column - The column no.\n     * @param  {string} dir - asc or desc\n     * @filter {array} filter - optional parameter with a list of strings\n     * @return {void}\n     */\n    filter(column, dir, init, terms) {\n        const dt = this.dt\n\n        // Creates a internal state that manages filters if there are none\n        if ( !dt.filterState ) {\n            dt.filterState = {\n                originalData: dt.data\n            }\n        }\n\n        // If that column is was not filtered yet, we need to create its state\n        if ( !dt.filterState[column] ) {\n\n            // append a filter that selects all rows, 'resetting' the filter\n            const filters = [...terms, () => true]\n\n            dt.filterState[column] = (\n                function() {\n                    let i = 0\n                    return () => filters[i++ % (filters.length)]\n                }()\n            )\n        }\n\n        // Apply the filter and rebuild table\n        const rowFilter = dt.filterState[column]() // fetches next filter\n        const filteredRows = Array.from(dt.filterState.originalData).filter(tr => {\n            const cell = tr.cells[column]\n            const content = cell.hasAttribute(\"data-content\") ? cell.getAttribute(\"data-content\") : cell.innerText\n\n            // If the filter is a function, call it, if it is a string, compare it\n            return (typeof rowFilter) === \"function\" ? rowFilter(content) : content === rowFilter\n        })\n\n        dt.data = filteredRows\n\n        if (!dt.data.length) {\n            dt.clear()\n            dt.hasRows = false\n            dt.setMessage(dt.options.labels.noRows)\n        } else {\n            this.rebuild()\n            dt.update()\n        }\n\n        if (!init) {\n            dt.emit(\"datatable.sort\", column, dir)\n        }\n    }\n\n    /**\n     * Sort by column\n     * @param  {int} column - The column no.\n     * @param  {string} dir - asc or desc\n     * @return {void}\n     */\n    sort(column, dir, init) {\n        const dt = this.dt\n\n        // Check column is present\n        if (dt.hasHeadings && (column < 0 || column > dt.headings.length)) {\n            return false\n        }\n\n        //If there is a filter for this column, apply it instead of sorting\n        const filterTerms = dt.options.filters &&\n              dt.options.filters[dt.headings[column].textContent]\n        if ( filterTerms && filterTerms.length !== 0 ) {\n            this.filter(column, dir, init, filterTerms)\n            return\n        }\n\n        dt.sorting = true\n\n        if (!init) {\n            dt.emit(\"datatable.sorting\", column, dir)\n        }\n\n        let rows = dt.data\n        const alpha = []\n        const numeric = []\n        let a = 0\n        let n = 0\n        const th = dt.headings[column]\n\n        const waitFor = []\n\n        // Check for date format\n        if (th.getAttribute(\"data-type\") === \"date\") {\n            let format = false\n            const formatted = th.hasAttribute(\"data-format\")\n\n            if (formatted) {\n                format = th.getAttribute(\"data-format\")\n            }\n            waitFor.push(import(\"./date\").then(({parseDate}) => date => parseDate(date, format)))\n        }\n\n        Promise.all(waitFor).then(importedFunctions => {\n            const parseFunction = importedFunctions[0] // only defined if date\n            Array.from(rows).forEach(tr => {\n                const cell = tr.cells[column]\n                const content = cell.hasAttribute(\"data-content\") ? cell.getAttribute(\"data-content\") : cell.innerText\n                let num\n                if (parseFunction) {\n                    num = parseFunction(content)\n                } else if (typeof content===\"string\") {\n                    num = content.replace(/(\\$|,|\\s|%)/g, \"\")\n                } else {\n                    num = content\n                }\n\n                if (parseFloat(num) == num) {\n                    numeric[n++] = {\n                        value: Number(num),\n                        row: tr\n                    }\n                } else {\n                    alpha[a++] = {\n                        value: typeof content===\"string\" ? content.toLowerCase() : content,\n                        row: tr\n                    }\n                }\n            })\n\n            /* Sort according to direction (ascending or descending) */\n            if (!dir) {\n                if (th.classList.contains(\"asc\")) {\n                    dir = \"desc\"\n                } else {\n                    dir = \"asc\"\n                }\n            }\n            let top\n            let btm\n            if (dir == \"desc\") {\n                top = sortItems(alpha, -1)\n                btm = sortItems(numeric, -1)\n                th.classList.remove(\"asc\")\n                th.classList.add(\"desc\")\n                th.setAttribute(\"aria-sort\", \"descending\")\n            } else {\n                top = sortItems(numeric, 1)\n                btm = sortItems(alpha, 1)\n                th.classList.remove(\"desc\")\n                th.classList.add(\"asc\")\n                th.setAttribute(\"aria-sort\", \"ascending\")\n            }\n\n            /* Clear asc/desc class names from the last sorted column's th if it isn't the same as the one that was just clicked */\n            if (dt.lastTh && th != dt.lastTh) {\n                dt.lastTh.classList.remove(\"desc\")\n                dt.lastTh.classList.remove(\"asc\")\n                dt.lastTh.removeAttribute(\"aria-sort\")\n            }\n\n            dt.lastTh = th\n\n            /* Reorder the table */\n            rows = top.concat(btm)\n\n            dt.data = []\n            const indexes = []\n\n            rows.forEach((v, i) => {\n                dt.data.push(v.row)\n\n                if (v.row.searchIndex !== null && v.row.searchIndex !== undefined) {\n                    indexes.push(i)\n                }\n            })\n\n            dt.searchData = indexes\n\n            this.rebuild()\n\n            dt.update()\n\n            if (!init) {\n                dt.emit(\"datatable.sort\", column, dir)\n            }\n        })\n    }\n\n    /**\n     * Rebuild the columns\n     * @return {Void}\n     */\n    rebuild() {\n        let a\n        let b\n        let c\n        let d\n        const dt = this.dt\n        const temp = []\n\n        dt.activeRows = []\n        dt.activeHeadings = []\n\n        dt.headings.forEach((th, i) => {\n            th.originalCellIndex = i\n            th.sortable = th.getAttribute(\"data-sortable\") !== \"false\"\n            if (!dt.hiddenColumns.includes(i)) {\n                dt.activeHeadings.push(th)\n            }\n        })\n\n        if (dt.selectedColumns.length) {\n            dt.data.forEach(row => {\n                Array.from(row.cells).forEach((cell, i) => {\n                    if (dt.selectedColumns.includes(i)) {\n                        dt.columnRenderers.forEach(options => {\n                            if (options.columns.includes(i)) {\n                                dt.data[cell.parentNode.dataIndex].cells[cell.cellIndex].innerHTML = cell.innerHTML = options.renderer.call(this, cell.data, cell, row)\n                            }\n                        })\n                    }\n                })\n            })\n        }\n\n        // Loop over the rows and reorder the cells\n        dt.data.forEach((row, i) => {\n            a = row.cloneNode(false)\n            b = row.cloneNode(false)\n\n            a.dataIndex = b.dataIndex = i\n\n            if (row.searchIndex !== null && row.searchIndex !== undefined) {\n                a.searchIndex = b.searchIndex = row.searchIndex\n            }\n\n            // Append the cell to the fragment in the correct order\n            Array.from(row.cells).forEach(cell => {\n                c = cell.cloneNode(true)\n                c.data = cell.data\n                a.appendChild(c)\n\n                if (!dt.hiddenColumns.includes(c.cellIndex)) {\n                    d = c.cloneNode(true)\n                    d.data = c.data\n                    b.appendChild(d)\n                }\n            })\n\n            // Append the fragment with the ordered cells\n            temp.push(a)\n            dt.activeRows.push(b)\n        })\n\n        dt.data = temp\n\n        dt.update()\n    }\n}\n","import {createElement} from \"./helpers\"\n\n/**\n * Parse data to HTML table\n */\nexport const dataToTable = function (data) {\n    let thead = false\n    let tbody = false\n\n    data = data || this.options.data\n\n    if (data.headings) {\n        thead = createElement(\"thead\")\n        const tr = createElement(\"tr\")\n        data.headings.forEach(col => {\n            const td = createElement(\"th\", {\n                html: col\n            })\n            tr.appendChild(td)\n        })\n\n        thead.appendChild(tr)\n    }\n\n    if (data.data && data.data.length) {\n        tbody = createElement(\"tbody\")\n        data.data.forEach(rows => {\n            if (data.headings) {\n                if (data.headings.length !== rows.length) {\n                    throw new Error(\n                        \"The number of rows do not match the number of headings.\"\n                    )\n                }\n            }\n            const tr = createElement(\"tr\")\n            rows.forEach(value => {\n                const td = createElement(\"td\", {\n                    html: value\n                })\n                tr.appendChild(td)\n            })\n            tbody.appendChild(tr)\n        })\n    }\n\n    if (thead) {\n        if (this.dom.tHead !== null) {\n            this.dom.removeChild(this.dom.tHead)\n        }\n        this.dom.appendChild(thead)\n    }\n\n    if (tbody) {\n        if (this.dom.tBodies.length) {\n            this.dom.removeChild(this.dom.tBodies[0])\n        }\n        this.dom.appendChild(tbody)\n    }\n}\n","/**\n * Default configuration\n * @typ {Object}\n */\nexport const defaultConfig = {\n    sortable: true,\n    searchable: true,\n\n    // Pagination\n    paging: true,\n    perPage: 10,\n    perPageSelect: [5, 10, 15, 20, 25],\n    nextPrev: true,\n    firstLast: false,\n    prevText: \"&lsaquo;\",\n    nextText: \"&rsaquo;\",\n    firstText: \"&laquo;\",\n    lastText: \"&raquo;\",\n    ellipsisText: \"&hellip;\",\n    ascText: \"▴\",\n    descText: \"▾\",\n    truncatePager: true,\n    pagerDelta: 2,\n\n    scrollY: \"\",\n\n    fixedColumns: true,\n    fixedHeight: false,\n\n    header: true,\n    hiddenHeader: false,\n    footer: false,\n\n    tabIndex: false,\n    rowNavigation: false,\n\n    // Customise the display text\n    labels: {\n        placeholder: \"Search...\", // The search input placeholder\n        perPage: \"{select} entries per page\", // per-page dropdown label\n        noRows: \"No entries found\", // Message shown when there are no records to show\n        noResults: \"No results match your search query\", // Message shown when there are no search results\n        info: \"Showing {start} to {end} of {rows} entries\" //\n    },\n\n    // Customise the layout\n    layout: {\n        top: \"{select}{search}\",\n        bottom: \"{info}{pager}\"\n    }\n}\n","import {Rows} from \"./rows\"\nimport {Columns} from \"./columns\"\nimport {dataToTable} from \"./table\"\nimport {defaultConfig} from \"./config\"\nimport {\n    isObject,\n    createElement,\n    flush,\n    button,\n    truncate\n} from \"./helpers\"\n\n\nexport class DataTable {\n    constructor(table, options = {}) {\n\n        const dom = typeof table === \"string\" ? document.querySelector(table) : table\n\n        // user options\n        this.options = {\n            ...defaultConfig,\n            ...options,\n            layout: {\n                ...defaultConfig.layout,\n                ...options.layout\n            },\n            labels: {\n                ...defaultConfig.labels,\n                ...options.labels\n            }\n        }\n\n        this.rows = new Rows(this)\n        this.columns = new Columns(this)\n\n        this.initialized = false\n\n        this.initialLayout = dom.innerHTML\n        this.initialSortable = this.options.sortable\n\n        if (this.options.tabIndex) {\n            dom.tabIndex = this.options.tabIndex\n        } else if (this.options.rowNavigation && dom.tabIndex === -1) {\n            dom.tabIndex = 0\n        }\n\n        // Disable manual sorting if no header is present (#4)\n        if (!this.options.header) {\n            this.options.sortable = false\n        }\n\n        if (dom.tHead === null) {\n            if (!this.options.data ||\n                (this.options.data && !this.options.data.headings)\n            ) {\n                this.options.sortable = false\n            }\n        }\n\n        if (dom.tBodies.length && !dom.tBodies[0].rows.length) {\n            if (this.options.data) {\n                if (!this.options.data.data) {\n                    throw new Error(\n                        \"You seem to be using the data option, but you've not defined any rows.\"\n                    )\n                }\n            }\n        }\n\n        this.dom = dom\n\n        this.listeners = {\n            onResize: event => this.onResize(event)\n        }\n\n        this.init()\n    }\n\n    /**\n     * Initialize the instance\n     * @param  {Object} options\n     * @return {Void}\n     */\n    init(options) {\n        if (this.initialized || this.dom.classList.contains(\"dataTable-table\")) {\n            return false\n        }\n\n        Object.assign(this.options, options || {})\n\n        this.currentPage = 1\n        this.onFirstPage = true\n\n        this.hiddenColumns = []\n        this.columnRenderers = []\n        this.selectedColumns = []\n\n        this.render()\n\n        setTimeout(() => {\n            this.emit(\"datatable.init\")\n            this.initialized = true\n        }, 10)\n    }\n\n    /**\n     * Render the instance\n     * @param  {String} type\n     * @return {Void}\n     */\n    render() {\n        let template = \"\"\n\n        // Convert data to HTML\n        if (this.options.data) {\n            dataToTable.call(this)\n        }\n\n        // Store references\n        this.body = this.dom.tBodies[0]\n        this.head = this.dom.tHead\n        this.foot = this.dom.tFoot\n\n        if (!this.body) {\n            this.body = createElement(\"tbody\")\n\n            this.dom.appendChild(this.body)\n        }\n\n        this.hasRows = this.body.rows.length > 0\n\n        // Make a tHead if there isn't one (fixes #8)\n        if (!this.head) {\n            const h = createElement(\"thead\")\n            const t = createElement(\"tr\")\n\n            if (this.hasRows) {\n                Array.from(this.body.rows[0].cells).forEach(() => {\n                    t.appendChild(createElement(\"th\"))\n                })\n\n                h.appendChild(t)\n            }\n\n            this.head = h\n\n            this.dom.insertBefore(this.head, this.body)\n\n            this.hiddenHeader = this.options.hiddenHeader\n        }\n\n        this.headings = []\n        this.hasHeadings = this.head.rows.length > 0\n\n        if (this.hasHeadings) {\n            this.header = this.head.rows[0]\n            this.headings = [].slice.call(this.header.cells)\n        }\n\n        // Header\n        if (!this.options.header) {\n            if (this.head) {\n                this.dom.removeChild(this.dom.tHead)\n            }\n        }\n\n        // Footer\n        if (this.options.footer) {\n            if (this.head && !this.foot) {\n                this.foot = createElement(\"tfoot\", {\n                    html: this.head.innerHTML\n                })\n                this.dom.appendChild(this.foot)\n            }\n        } else {\n            if (this.foot) {\n                this.dom.removeChild(this.dom.tFoot)\n            }\n        }\n\n        // Build\n        this.wrapper = createElement(\"div\", {\n            class: \"dataTable-wrapper dataTable-loading\"\n        })\n\n        // Template for custom layouts\n        template += \"<div class='dataTable-top'>\"\n        template += this.options.layout.top\n        template += \"</div>\"\n        if (this.options.scrollY.length) {\n            template += `<div class='dataTable-container' style='height: ${this.options.scrollY}; overflow-Y: auto;'></div>`\n        } else {\n            template += \"<div class='dataTable-container'></div>\"\n        }\n        template += \"<div class='dataTable-bottom'>\"\n        template += this.options.layout.bottom\n        template += \"</div>\"\n\n        // Info placement\n        template = template.replace(\"{info}\", this.options.paging ? \"<div class='dataTable-info'></div>\" : \"\")\n\n        // Per Page Select\n        if (this.options.paging && this.options.perPageSelect) {\n            let wrap = \"<div class='dataTable-dropdown'><label>\"\n            wrap += this.options.labels.perPage\n            wrap += \"</label></div>\"\n\n            // Create the select\n            const select = createElement(\"select\", {\n                class: \"dataTable-selector\"\n            })\n\n            // Create the options\n            this.options.perPageSelect.forEach(val => {\n                const selected = val === this.options.perPage\n                const option = new Option(val, val, selected, selected)\n                select.add(option)\n            })\n\n            // Custom label\n            wrap = wrap.replace(\"{select}\", select.outerHTML)\n\n            // Selector placement\n            template = template.replace(\"{select}\", wrap)\n        } else {\n            template = template.replace(\"{select}\", \"\")\n        }\n\n        // Searchable\n        if (this.options.searchable) {\n            const form =\n                `<div class='dataTable-search'><input class='dataTable-input' placeholder='${this.options.labels.placeholder}' type='text'></div>`\n\n            // Search input placement\n            template = template.replace(\"{search}\", form)\n        } else {\n            template = template.replace(\"{search}\", \"\")\n        }\n\n        if (this.hasHeadings) {\n            // Sortable\n            this.renderHeader()\n        }\n\n        // Add table class\n        this.dom.classList.add(\"dataTable-table\")\n\n        // Paginator\n        const paginatorWrapper = createElement(\"nav\", {\n            class: \"dataTable-pagination\"\n        })\n        const paginator = createElement(\"ul\", {\n            class: \"dataTable-pagination-list\"\n        })\n        paginatorWrapper.appendChild(paginator)\n\n        // Pager(s) placement\n        template = template.replace(/\\{pager\\}/g, paginatorWrapper.outerHTML)\n        this.wrapper.innerHTML = template\n\n        this.container = this.wrapper.querySelector(\".dataTable-container\")\n\n        this.pagers = this.wrapper.querySelectorAll(\".dataTable-pagination-list\")\n\n        this.label = this.wrapper.querySelector(\".dataTable-info\")\n\n        // Insert in to DOM tree\n        this.dom.parentNode.replaceChild(this.wrapper, this.dom)\n        this.container.appendChild(this.dom)\n\n        // Store the table dimensions\n        this.rect = this.dom.getBoundingClientRect()\n\n        // Convert rows to array for processing\n        this.data = Array.from(this.body.rows)\n        this.activeRows = this.data.slice()\n        this.activeHeadings = this.headings.slice()\n\n        // Update\n        this.update()\n\n\n        this.setColumns()\n\n\n        // Fix height\n        this.fixHeight()\n\n        // Fix columns\n        this.fixColumns()\n\n        // Class names\n        if (!this.options.header) {\n            this.wrapper.classList.add(\"no-header\")\n        }\n\n        if (!this.options.footer) {\n            this.wrapper.classList.add(\"no-footer\")\n        }\n\n        if (this.options.sortable) {\n            this.wrapper.classList.add(\"sortable\")\n        }\n\n        if (this.options.searchable) {\n            this.wrapper.classList.add(\"searchable\")\n        }\n\n        if (this.options.fixedHeight) {\n            this.wrapper.classList.add(\"fixed-height\")\n        }\n\n        if (this.options.fixedColumns) {\n            this.wrapper.classList.add(\"fixed-columns\")\n        }\n\n        this.bindEvents()\n    }\n\n    /**\n     * Render the page\n     * @return {Void}\n     */\n    renderPage(lastRowCursor=false) {\n        if (this.hasHeadings) {\n            flush(this.header)\n\n            this.activeHeadings.forEach(th => this.header.appendChild(th))\n        }\n\n\n        if (this.hasRows && this.totalPages) {\n            if (this.currentPage > this.totalPages) {\n                this.currentPage = 1\n            }\n\n            // Use a fragment to limit touching the DOM\n            const index = this.currentPage - 1\n\n            const frag = document.createDocumentFragment()\n            this.pages[index].forEach(row => frag.appendChild(this.rows.render(row)))\n\n            this.clear(frag)\n\n            this.onFirstPage = this.currentPage === 1\n            this.onLastPage = this.currentPage === this.lastPage\n        } else {\n            this.setMessage(this.options.labels.noRows)\n        }\n\n        // Update the info\n        let current = 0\n\n        let f = 0\n        let t = 0\n        let items\n\n        if (this.totalPages) {\n            current = this.currentPage - 1\n            f = current * this.options.perPage\n            t = f + this.pages[current].length\n            f = f + 1\n            items = this.searching ? this.searchData.length : this.data.length\n        }\n\n        if (this.label && this.options.labels.info.length) {\n            // CUSTOM LABELS\n            const string = this.options.labels.info\n                .replace(\"{start}\", f)\n                .replace(\"{end}\", t)\n                .replace(\"{page}\", this.currentPage)\n                .replace(\"{pages}\", this.totalPages)\n                .replace(\"{rows}\", items)\n\n            this.label.innerHTML = items ? string : \"\"\n        }\n\n        if (this.currentPage == 1) {\n            this.fixHeight()\n        }\n\n        if (this.options.rowNavigation) {\n            if (!this.rows.cursor || !this.pages[this.currentPage-1].includes(this.rows.cursor)) {\n                const rows = this.pages[this.currentPage-1]\n                if (lastRowCursor) {\n                    this.rows.setCursor(rows[rows.length-1])\n                } else {\n                    this.rows.setCursor(rows[0])\n                }\n\n            }\n        }\n    }\n\n    /**\n     * Render the pager(s)\n     * @return {Void}\n     */\n    renderPager() {\n        flush(this.pagers)\n\n        if (this.totalPages > 1) {\n            const c = \"pager\"\n            const frag = document.createDocumentFragment()\n            const prev = this.onFirstPage ? 1 : this.currentPage - 1\n            const next = this.onLastPage ? this.totalPages : this.currentPage + 1\n\n            // first button\n            if (this.options.firstLast) {\n                frag.appendChild(button(c, 1, this.options.firstText))\n            }\n\n            // prev button\n            if (this.options.nextPrev && !this.onFirstPage) {\n                frag.appendChild(button(c, prev, this.options.prevText))\n            }\n\n            let pager = this.links\n\n            // truncate the links\n            if (this.options.truncatePager) {\n                pager = truncate(\n                    this.links,\n                    this.currentPage,\n                    this.pages.length,\n                    this.options.pagerDelta,\n                    this.options.ellipsisText\n                )\n            }\n\n            // active page link\n            this.links[this.currentPage - 1].classList.add(\"active\")\n\n            // append the links\n            pager.forEach(p => {\n                p.classList.remove(\"active\")\n                frag.appendChild(p)\n            })\n\n            this.links[this.currentPage - 1].classList.add(\"active\")\n\n            // next button\n            if (this.options.nextPrev && !this.onLastPage) {\n                frag.appendChild(button(c, next, this.options.nextText))\n            }\n\n            // first button\n            if (this.options.firstLast) {\n                frag.appendChild(button(c, this.totalPages, this.options.lastText))\n            }\n\n            // We may have more than one pager\n            this.pagers.forEach(pager => {\n                pager.appendChild(frag.cloneNode(true))\n            })\n        }\n    }\n\n    /**\n     * Render the header\n     * @return {Void}\n     */\n    renderHeader() {\n        this.labels = []\n\n        if (this.headings && this.headings.length) {\n            this.headings.forEach((th, i) => {\n\n                this.labels[i] = th.textContent\n\n                if (th.firstElementChild && th.firstElementChild.classList.contains(\"dataTable-sorter\")) {\n                    th.innerHTML = th.firstElementChild.innerHTML\n                }\n\n                th.sortable = th.getAttribute(\"data-sortable\") !== \"false\"\n\n                th.originalCellIndex = i\n                if (this.options.sortable && th.sortable) {\n                    const link = createElement(\"a\", {\n                        href: \"#\",\n                        class: \"dataTable-sorter\",\n                        html: th.innerHTML\n                    })\n\n                    th.innerHTML = \"\"\n                    th.setAttribute(\"data-sortable\", \"\")\n                    th.appendChild(link)\n                }\n            })\n        }\n\n        this.fixColumns()\n    }\n\n    /**\n     * Bind event listeners\n     * @return {[type]} [description]\n     */\n    bindEvents() {\n        // Per page selector\n        if (this.options.perPageSelect) {\n            const selector = this.wrapper.querySelector(\".dataTable-selector\")\n            if (selector) {\n                // Change per page\n                selector.addEventListener(\"change\", () => {\n                    this.options.perPage = parseInt(selector.value, 10)\n                    this.update()\n\n                    this.fixHeight()\n\n                    this.emit(\"datatable.perpage\", this.options.perPage)\n                }, false)\n            }\n        }\n\n        // Search input\n        if (this.options.searchable) {\n            this.input = this.wrapper.querySelector(\".dataTable-input\")\n            if (this.input) {\n                this.input.addEventListener(\"keyup\", () => this.search(this.input.value), false)\n            }\n        }\n\n        // Pager(s) / sorting\n        this.wrapper.addEventListener(\"click\", e => {\n            const t = e.target.closest(\"a\")\n            if (t && (t.nodeName.toLowerCase() === \"a\")) {\n                if (t.hasAttribute(\"data-page\")) {\n                    this.page(t.getAttribute(\"data-page\"))\n                    e.preventDefault()\n                } else if (\n                    this.options.sortable &&\n                    t.classList.contains(\"dataTable-sorter\") &&\n                    t.parentNode.getAttribute(\"data-sortable\") != \"false\"\n                ) {\n                    this.columns.sort(this.headings.indexOf(t.parentNode))\n                    e.preventDefault()\n                }\n            }\n        }, false)\n        if (this.options.rowNavigation) {\n            this.dom.addEventListener(\"keydown\", event => {\n                if (event.key === \"ArrowUp\") {\n                    if (this.rows.cursor.previousElementSibling) {\n                        this.rows.setCursor(this.rows.cursor.previousElementSibling)\n                        event.preventDefault()\n                        event.stopPropagation()\n                    } else if (!this.onFirstPage) {\n                        this.page(this.currentPage-1, true)\n                    }\n                } else if (event.key === \"ArrowDown\") {\n                    if (this.rows.cursor.nextElementSibling) {\n                        this.rows.setCursor(this.rows.cursor.nextElementSibling)\n                        event.preventDefault()\n                        event.stopPropagation()\n                    } else if (!this.onLastPage) {\n                        this.page(this.currentPage+1)\n                    }\n                } else if ([\"Enter\", \" \"].includes(event.key)) {\n                    this.emit(\"datatable.selectrow\", this.rows.cursor, event)\n                }\n            })\n            this.body.addEventListener(\"mousedown\", event => {\n                if (this.body.matches(\":focus\")) {\n                    const row = Array.from(this.body.rows).find(row => row.contains(event.target))\n                    this.emit(\"datatable.selectrow\", row, event)\n                }\n\n            })\n        } else {\n            this.body.addEventListener(\"mousedown\", event => {\n                const row = Array.from(this.body.rows).find(row => row.contains(event.target))\n                this.emit(\"datatable.selectrow\", row, event)\n            })\n        }\n\n        window.addEventListener(\"resize\", this.listeners.onResize)\n    }\n\n    /**\n     * execute on resize\n     */\n    onResize() {\n        this.rect = this.container.getBoundingClientRect()\n        if (!this.rect.width) {\n            // No longer shown, likely no longer part of DOM. Give up.\n            return\n        }\n        this.fixColumns()\n    }\n\n    /**\n     * Set up columns\n     * @return {[type]} [description]\n     */\n    setColumns(ajax) {\n\n        if (!ajax) {\n            this.data.forEach(row => {\n                Array.from(row.cells).forEach(cell => {\n                    cell.data = cell.innerHTML\n                })\n            })\n        }\n\n        // Check for the columns option\n        if (this.options.columns && this.headings.length) {\n\n            this.options.columns.forEach(data => {\n\n                // convert single column selection to array\n                if (!Array.isArray(data.select)) {\n                    data.select = [data.select]\n                }\n\n                if (data.hasOwnProperty(\"render\") && typeof data.render === \"function\") {\n                    this.selectedColumns = this.selectedColumns.concat(data.select)\n\n                    this.columnRenderers.push({\n                        columns: data.select,\n                        renderer: data.render\n                    })\n                }\n\n                // Add the data attributes to the th elements\n                data.select.forEach(column => {\n                    const th = this.headings[column]\n                    if (!th) {\n                        return\n                    }\n                    if (data.type) {\n                        th.setAttribute(\"data-type\", data.type)\n                    }\n                    if (data.format) {\n                        th.setAttribute(\"data-format\", data.format)\n                    }\n                    if (data.hasOwnProperty(\"sortable\")) {\n                        th.setAttribute(\"data-sortable\", data.sortable)\n                    }\n\n                    if (data.hasOwnProperty(\"hidden\")) {\n                        if (data.hidden !== false) {\n                            this.columns.hide([column])\n                        }\n                    }\n\n                    if (data.hasOwnProperty(\"sort\") && data.select.length === 1) {\n                        this.columns.sort(data.select[0], data.sort, true)\n                    }\n                })\n            })\n        }\n\n        if (this.hasRows) {\n            this.data.forEach((row, i) => {\n                row.dataIndex = i\n                Array.from(row.cells).forEach(cell => {\n                    cell.data = cell.innerHTML\n                })\n            })\n\n            this.columns.rebuild()\n        }\n\n        this.renderHeader()\n    }\n\n    /**\n     * Destroy the instance\n     * @return {void}\n     */\n    destroy() {\n        this.dom.innerHTML = this.initialLayout\n\n        // Remove the className\n        this.dom.classList.remove(\"dataTable-table\")\n\n        // Remove the containers\n        this.wrapper.parentNode.replaceChild(this.dom, this.wrapper)\n\n        this.initialized = false\n\n        window.removeEventListener(\"resize\", this.listeners.onResize)\n    }\n\n    /**\n     * Update the instance\n     * @return {Void}\n     */\n    update() {\n        this.wrapper.classList.remove(\"dataTable-empty\")\n\n        this.paginate()\n        this.renderPage()\n\n        this.links = []\n\n        let i = this.pages.length\n        while (i--) {\n            const num = i + 1\n            this.links[i] = button(i === 0 ? \"active\" : \"\", num, num)\n        }\n\n        this.sorting = false\n\n        this.renderPager()\n\n        this.rows.update()\n\n        this.emit(\"datatable.update\")\n    }\n\n    /**\n     * Sort rows into pages\n     * @return {Number}\n     */\n    paginate() {\n        let rows = this.activeRows\n\n        if (this.searching) {\n            rows = []\n\n            this.searchData.forEach(index => rows.push(this.activeRows[index]))\n        }\n\n        if (this.options.paging) {\n            // Check for hidden columns\n            this.pages = rows\n                .map((tr, i) => i % this.options.perPage === 0 ? rows.slice(i, i + this.options.perPage) : null)\n                .filter(page => page)\n        } else {\n            this.pages = [rows]\n        }\n\n        this.totalPages = this.lastPage = this.pages.length\n\n        return this.totalPages\n    }\n\n    /**\n     * Fix column widths\n     * @return {Void}\n     */\n    fixColumns() {\n\n        if ((this.options.scrollY.length || this.options.fixedColumns) && this.activeHeadings && this.activeHeadings.length) {\n            let cells\n            let hd = false\n            this.columnWidths = []\n\n            // If we have headings we need only set the widths on them\n            // otherwise we need a temp header and the widths need applying to all cells\n            if (this.dom.tHead) {\n\n                if (this.options.scrollY.length) {\n                    hd = createElement(\"thead\")\n                    hd.appendChild(createElement(\"tr\"))\n                    hd.style.height = \"0px\"\n                    if (this.headerTable) {\n                        // move real header back into place\n                        this.dom.tHead = this.headerTable.tHead\n                    }\n                }\n\n                // Reset widths\n                this.activeHeadings.forEach(cell => {\n                    cell.style.width = \"\"\n                })\n\n                const totalOffsetWidth = this.activeHeadings.reduce(\n                    (total, cell) => total + cell.offsetWidth,\n                    0\n                )\n\n                this.activeHeadings.forEach((cell, i) => {\n                    const ow = cell.offsetWidth\n                    const w = ow / totalOffsetWidth * 100\n                    cell.style.width = `${w}%`\n                    this.columnWidths[i] = ow\n                    if (this.options.scrollY.length) {\n                        const th = createElement(\"th\")\n                        hd.firstElementChild.appendChild(th)\n                        th.style.width = `${w}%`\n                        th.style.paddingTop = \"0\"\n                        th.style.paddingBottom = \"0\"\n                        th.style.border = \"0\"\n                    }\n                })\n\n                if (this.options.scrollY.length) {\n                    const container = this.dom.parentElement\n                    if (!this.headerTable) {\n                        this.headerTable = createElement(\"table\", {\n                            class: \"dataTable-table\"\n                        })\n                        const headercontainer = createElement(\"div\", {\n                            class: \"dataTable-headercontainer\"\n                        })\n                        headercontainer.appendChild(this.headerTable)\n                        container.parentElement.insertBefore(headercontainer, container)\n                    }\n                    const thd = this.dom.tHead\n                    this.dom.replaceChild(hd, thd)\n                    this.headerTable.tHead = thd\n\n                    // Compensate for scrollbars.\n                    this.headerTable.parentElement.style.paddingRight = `${\n                        this.headerTable.clientWidth -\n                        this.dom.clientWidth +\n                        parseInt(\n                            this.headerTable.parentElement.style.paddingRight ||\n                            \"0\",\n                            10\n                        )\n                    }px`\n\n                    if (container.scrollHeight > container.clientHeight) {\n                        // scrollbars on one page means scrollbars on all pages.\n                        container.style.overflowY = \"scroll\"\n                    }\n                }\n\n            } else {\n                cells = []\n\n                // Make temperary headings\n                hd = createElement(\"thead\")\n                const r = createElement(\"tr\")\n                Array.from(this.dom.tBodies[0].rows[0].cells).forEach(() => {\n                    const th = createElement(\"th\")\n                    r.appendChild(th)\n                    cells.push(th)\n                })\n\n                hd.appendChild(r)\n                this.dom.insertBefore(hd, this.body)\n\n                const widths = []\n                cells.forEach((cell, i) => {\n                    const ow = cell.offsetWidth\n                    const w = ow / this.rect.width * 100\n                    widths.push(w)\n                    this.columnWidths[i] = ow\n                })\n\n                this.data.forEach(row => {\n                    Array.from(row.cells).forEach((cell, i) => {\n                        if (this.columns.visible(cell.cellIndex))\n                            cell.style.width = `${widths[i]}%`\n                    })\n                })\n\n                // Discard the temp header\n                this.dom.removeChild(hd)\n            }\n        }\n    }\n\n    /**\n     * Fix the container height\n     * @return {Void}\n     */\n    fixHeight() {\n        if (this.options.fixedHeight) {\n            this.container.style.height = null\n            this.rect = this.container.getBoundingClientRect()\n            this.container.style.height = `${this.rect.height}px`\n        }\n    }\n\n    /**\n     * Perform a search of the data set\n     * @param  {string} query\n     * @return {void}\n     */\n    search(query) {\n        if (!this.hasRows) return false\n\n        query = query.toLowerCase()\n\n        this.currentPage = 1\n        this.searching = true\n        this.searchData = []\n\n        if (!query.length) {\n            this.searching = false\n            this.update()\n            this.emit(\"datatable.search\", query, this.searchData)\n            this.wrapper.classList.remove(\"search-results\")\n            return false\n        }\n\n        this.clear()\n\n        this.data.forEach((row, idx) => {\n            const inArray = this.searchData.includes(row)\n\n            // https://github.com/Mobius1/Vanilla-DataTables/issues/12\n            const doesQueryMatch = query.split(\" \").reduce((bool, word) => {\n                let includes = false\n                let cell = null\n                let content = null\n\n                for (let x = 0; x < row.cells.length; x++) {\n                    cell = row.cells[x]\n                    content = cell.hasAttribute(\"data-content\") ? cell.getAttribute(\"data-content\") : cell.textContent\n\n                    if (\n                        content.toLowerCase().includes(word) &&\n                        this.columns.visible(cell.cellIndex)\n                    ) {\n                        includes = true\n                        break\n                    }\n                }\n\n                return bool && includes\n            }, true)\n\n            if (doesQueryMatch && !inArray) {\n                row.searchIndex = idx\n                this.searchData.push(idx)\n            } else {\n                row.searchIndex = null\n            }\n        })\n\n        this.wrapper.classList.add(\"search-results\")\n\n        if (!this.searchData.length) {\n            this.wrapper.classList.remove(\"search-results\")\n\n            this.setMessage(this.options.labels.noResults)\n        } else {\n            this.update()\n        }\n\n        this.emit(\"datatable.search\", query, this.searchData)\n    }\n\n    /**\n     * Change page\n     * @param  {int} page\n     * @return {void}\n     */\n    page(page, lastRowCursor=false) {\n        // We don't want to load the current page again.\n        if (page == this.currentPage) {\n            return false\n        }\n\n        if (!isNaN(page)) {\n            this.currentPage = parseInt(page, 10)\n        }\n\n        if (page > this.pages.length || page < 0) {\n            return false\n        }\n\n        this.renderPage(lastRowCursor)\n        this.renderPager()\n\n        this.emit(\"datatable.page\", page)\n    }\n\n    /**\n     * Sort by column\n     * @param  {int} column - The column no.\n     * @param  {string} direction - asc or desc\n     * @return {void}\n     */\n    sortColumn(column, direction) {\n        // Use columns API until sortColumn method is removed\n        this.columns.sort(column, direction)\n    }\n\n    /**\n     * Add new row data\n     * @param {object} data\n     */\n    insert(data) {\n        let rows = []\n        if (isObject(data)) {\n            if (data.headings) {\n                if (!this.hasHeadings && !this.hasRows) {\n                    const tr = createElement(\"tr\")\n                    data.headings.forEach(heading => {\n                        const th = createElement(\"th\", {\n                            html: heading\n                        })\n\n                        tr.appendChild(th)\n                    })\n                    this.head.appendChild(tr)\n\n                    this.header = tr\n                    this.headings = [].slice.call(tr.cells)\n                    this.hasHeadings = true\n\n                    // Re-enable sorting if it was disabled due\n                    // to missing header\n                    this.options.sortable = this.initialSortable\n\n                    // Allow sorting on new header\n                    this.renderHeader()\n\n                    // Activate newly added headings\n                    this.activeHeadings = this.headings.slice()\n                }\n            }\n\n            if (data.data && Array.isArray(data.data)) {\n                rows = data.data\n            }\n        } else if (Array.isArray(data)) {\n            data.forEach(row => {\n                const r = []\n                Object.entries(row).forEach(([heading, cell]) => {\n\n                    const index = this.labels.indexOf(heading)\n\n                    if (index > -1) {\n                        r[index] = cell\n                    }\n                })\n                rows.push(r)\n            })\n        }\n\n        if (rows.length) {\n            this.rows.add(rows)\n\n            this.hasRows = true\n        }\n\n        this.update()\n        this.setColumns()\n        this.fixColumns()\n    }\n\n    /**\n     * Refresh the instance\n     * @return {void}\n     */\n    refresh() {\n        if (this.options.searchable) {\n            this.input.value = \"\"\n            this.searching = false\n        }\n        this.currentPage = 1\n        this.onFirstPage = true\n        this.update()\n\n        this.emit(\"datatable.refresh\")\n    }\n\n    /**\n     * Truncate the table\n     * @param  {mixes} html - HTML string or HTMLElement\n     * @return {void}\n     */\n    clear(html) {\n        if (this.body) {\n            flush(this.body)\n        }\n\n        let parent = this.body\n        if (!this.body) {\n            parent = this.dom\n        }\n\n        if (html) {\n            if (typeof html === \"string\") {\n                const frag = document.createDocumentFragment()\n                frag.innerHTML = html\n            }\n\n            parent.appendChild(html)\n        }\n    }\n\n    /**\n     * Print the table\n     * @return {void}\n     */\n    print() {\n        const headings = this.activeHeadings\n        const rows = this.activeRows\n        const table = createElement(\"table\")\n        const thead = createElement(\"thead\")\n        const tbody = createElement(\"tbody\")\n\n        const tr = createElement(\"tr\")\n        headings.forEach(th => {\n            tr.appendChild(\n                createElement(\"th\", {\n                    html: th.textContent\n                })\n            )\n        })\n\n        thead.appendChild(tr)\n\n        rows.forEach(row => {\n            const tr = createElement(\"tr\")\n            Array.from(row.cells).forEach(cell => {\n                tr.appendChild(\n                    createElement(\"td\", {\n                        html: cell.textContent\n                    })\n                )\n            })\n            tbody.appendChild(tr)\n        })\n\n        table.appendChild(thead)\n        table.appendChild(tbody)\n\n        // Open new window\n        const w = window.open()\n\n        // Append the table to the body\n        w.document.body.appendChild(table)\n\n        // Print\n        w.print()\n    }\n\n    /**\n     * Show a message in the table\n     * @param {string} message\n     */\n    setMessage(message) {\n        let colspan = 1\n\n        if (this.hasRows) {\n            colspan = this.data[0].cells.length\n        } else if (this.activeHeadings.length) {\n            colspan = this.activeHeadings.length\n        }\n\n        this.wrapper.classList.add(\"dataTable-empty\")\n\n        if (this.label) {\n            this.label.innerHTML = \"\"\n        }\n        this.totalPages = 0\n        this.renderPager()\n\n        this.clear(\n            createElement(\"tr\", {\n                html: `<td class=\"dataTables-empty\" colspan=\"${colspan}\">${message}</td>`\n            })\n        )\n    }\n\n    /**\n     * Add custom event listener\n     * @param  {String} event\n     * @param  {Function} callback\n     * @return {Void}\n     */\n    on(event, callback) {\n        this.events = this.events || {}\n        this.events[event] = this.events[event] || []\n        this.events[event].push(callback)\n    }\n\n    /**\n     * Remove custom event listener\n     * @param  {String} event\n     * @param  {Function} callback\n     * @return {Void}\n     */\n    off(event, callback) {\n        this.events = this.events || {}\n        if (event in this.events === false) return\n        this.events[event].splice(this.events[event].indexOf(callback), 1)\n    }\n\n    /**\n     * Fire custom event\n     * @param  {String} event\n     * @return {Void}\n     */\n    emit(event) {\n        this.events = this.events || {}\n        if (event in this.events === false) return\n        for (let i = 0; i < this.events[event].length; i++) {\n            this.events[event][i].apply(this, Array.prototype.slice.call(arguments, 1))\n        }\n    }\n}\n","import {\n    isObject\n} from \"../helpers\"\n\n/**\n * Convert CSV data to fit the format used in the table.\n * @param  {Object} userOptions User options\n * @return {Boolean}\n */\nexport const convertCSV = function(userOptions = {}) {\n    let obj = false\n    const defaults = {\n        lineDelimiter: \"\\n\",\n        columnDelimiter: \",\",\n        removeDoubleQuotes: false\n    }\n\n    // Check for the options object\n    if (!isObject(userOptions)) {\n        return false\n    }\n\n    const options = {\n        ...defaults,\n        ...userOptions\n    }\n\n    if (options.data.length || isObject(options.data)) {\n        // Import CSV\n        obj = {\n            data: []\n        }\n\n        // Split the string into rows\n        const rows = options.data.split(options.lineDelimiter)\n\n        if (rows.length) {\n\n            if (options.headings) {\n                obj.headings = rows[0].split(options.columnDelimiter)\n                if (options.removeDoubleQuotes) {\n                    obj.headings = obj.headings.map(e => e.trim().replace(/(^\"|\"$)/g, \"\"))\n                }\n                rows.shift()\n            }\n\n            rows.forEach((row, i) => {\n                obj.data[i] = []\n\n                // Split the rows into values\n                const values = row.split(options.columnDelimiter)\n\n                if (values.length) {\n                    values.forEach(value => {\n                        if (options.removeDoubleQuotes) {\n                            value = value.trim().replace(/(^\"|\"$)/g, \"\")\n                        }\n                        obj.data[i].push(value)\n                    })\n                }\n            })\n        }\n\n        if (obj) {\n            return obj\n        }\n    }\n\n    return false\n}\n","import {\n    isJson,\n    isObject\n} from \"../helpers\"\n\n/**\n * Convert JSON data to fit the format used in the table.\n * @param  {Object} userOptions User options\n * @return {Boolean}\n */\nexport const convertJSON = function(userOptions = {}) {\n    let obj = false\n    const defaults = {}\n\n    // Check for the options object\n    if (!isObject(userOptions)) {\n        return false\n    }\n\n    const options = {\n        ...defaults,\n        ...userOptions\n    }\n\n    if (options.data.length || isObject(options.data)) {\n        // Import CSV\n        const json = isJson(options.data)\n\n        // Valid JSON string\n        if (json) {\n            obj = {\n                headings: [],\n                data: []\n            }\n\n            json.forEach((data, i) => {\n                obj.data[i] = []\n                Object.entries(data).forEach(([column, value]) => {\n                    if (!obj.headings.includes(column)) {\n                        obj.headings.push(column)\n                    }\n\n                    obj.data[i].push(value)\n                })\n            })\n        } else {\n            console.warn(\"That's not valid JSON!\")\n        }\n\n        if (obj) {\n            return obj\n        }\n    }\n\n    return false\n}\n","import {\n    isObject\n} from \"../helpers\"\n\n/**\n * Export table to CSV\n * @param {DataTable} dataTable DataTable instance.\n * @param {Object} userOptions User options\n * @return {Boolean}\n */\nexport const exportCSV = function(dataTable, userOptions = {}) {\n    if (!dataTable.hasHeadings && !dataTable.hasRows) return false\n\n    const headers = dataTable.activeHeadings\n    let rows = []\n    let i\n    let x\n    let str\n    let link\n\n    const defaults = {\n        download: true,\n        skipColumn: [],\n        lineDelimiter: \"\\n\",\n        columnDelimiter: \",\"\n    }\n\n    // Check for the options object\n    if (!isObject(userOptions)) {\n        return false\n    }\n\n    const options = {\n        ...defaults,\n        ...userOptions\n    }\n\n    // Include headings\n    rows[0] = dataTable.header\n\n    // Selection or whole table\n    if (options.selection) {\n        // Page number\n        if (!isNaN(options.selection)) {\n            rows = rows.concat(dataTable.pages[options.selection - 1])\n        } else if (Array.isArray(options.selection)) {\n            // Array of page numbers\n            for (i = 0; i < options.selection.length; i++) {\n                rows = rows.concat(dataTable.pages[options.selection[i] - 1])\n            }\n        }\n    } else {\n        rows = rows.concat(dataTable.activeRows)\n    }\n\n    // Only proceed if we have data\n    if (rows.length) {\n        str = \"\"\n\n        for (i = 0; i < rows.length; i++) {\n            for (x = 0; x < rows[i].cells.length; x++) {\n                // Check for column skip and visibility\n                if (\n                    !options.skipColumn.includes(headers[x].originalCellIndex) &&\n                    dataTable.columns.visible(headers[x].originalCellIndex)\n                ) {\n                    let text = rows[i].cells[x].textContent\n                    text = text.trim()\n                    text = text.replace(/\\s{2,}/g, \" \")\n                    text = text.replace(/\\n/g, \"  \")\n                    text = text.replace(/\"/g, \"\\\"\\\"\")\n                    //have to manually encode \"#\" as encodeURI leaves it as is.\n                    text = text.replace(/#/g, \"%23\")\n                    if (text.includes(\",\"))\n                        text = `\"${text}\"`\n\n\n                    str += text + options.columnDelimiter\n                }\n            }\n            // Remove trailing column delimiter\n            str = str.trim().substring(0, str.length - 1)\n\n            // Apply line delimiter\n            str += options.lineDelimiter\n        }\n\n        // Remove trailing line delimiter\n        str = str.trim().substring(0, str.length - 1)\n\n        // Download\n        if (options.download) {\n            // Create a link to trigger the download\n            link = document.createElement(\"a\")\n            link.href = encodeURI(`data:text/csv;charset=utf-8,${str}`)\n            link.download = `${options.filename || \"datatable_export\"}.csv`\n\n            // Append the link\n            document.body.appendChild(link)\n\n            // Trigger the download\n            link.click()\n\n            // Remove the link\n            document.body.removeChild(link)\n        }\n\n        return str\n    }\n\n    return false\n}\n","import {\n    isObject\n} from \"../helpers\"\n\n/**\n * Export table to JSON\n * @param {DataTable} dataTable DataTable instance.\n * @param {Object} userOptions User options\n * @return {Boolean}\n */\nexport const exportJSON = function(dataTable, userOptions = {}) {\n    if (!dataTable.hasHeadings && !dataTable.hasRows) return false\n\n    const headers = dataTable.activeHeadings\n    let rows = []\n    const arr = []\n    let i\n    let x\n    let str\n    let link\n\n    const defaults = {\n        download: true,\n        skipColumn: [],\n        replacer: null,\n        space: 4\n    }\n\n    // Check for the options object\n    if (!isObject(userOptions)) {\n        return false\n    }\n\n    const options = {\n        ...defaults,\n        ...userOptions\n    }\n\n\n    // Selection or whole table\n    if (options.selection) {\n        // Page number\n        if (!isNaN(options.selection)) {\n            rows = rows.concat(dataTable.pages[options.selection - 1])\n        } else if (Array.isArray(options.selection)) {\n            // Array of page numbers\n            for (i = 0; i < options.selection.length; i++) {\n                rows = rows.concat(dataTable.pages[options.selection[i] - 1])\n            }\n        }\n    } else {\n        rows = rows.concat(dataTable.activeRows)\n    }\n\n    // Only proceed if we have data\n    if (rows.length) {\n        // Iterate rows\n        for (x = 0; x < rows.length; x++) {\n            arr[x] = arr[x] || {}\n            // Iterate columns\n            for (i = 0; i < headers.length; i++) {\n                // Check for column skip and column visibility\n                if (\n                    !options.skipColumn.includes(headers[i].originalCellIndex) &&\n                    dataTable.columns.visible(headers[i].originalCellIndex)\n                ) {\n                    arr[x][headers[i].textContent] = rows[x].cells[i].textContent\n                }\n            }\n        }\n\n        // Convert the array of objects to JSON string\n        str = JSON.stringify(arr, options.replacer, options.space)\n\n        // Download\n        if (options.download) {\n            // Create a link to trigger the download\n            link = document.createElement(\"a\")\n            link.href = encodeURI(`data:application/json;charset=utf-8,${str}`)\n            link.download = `${options.filename || \"datatable_export\"}.json`\n\n            // Append the link\n            document.body.appendChild(link)\n\n            // Trigger the download\n            link.click()\n\n            // Remove the link\n            document.body.removeChild(link)\n        }\n\n        return str\n    }\n\n    return false\n}\n","import {\n    isObject\n} from \"../helpers\"\n\n/**\n * Export table to SQL\n * @param {DataTable} dataTable DataTable instance.\n * @param {Object} userOptions User options\n * @return {Boolean}\n */\nexport const exportSQL = function(dataTable, userOptions = {}) {\n    if (!dataTable.hasHeadings && !dataTable.hasRows) return false\n\n    const headers = dataTable.activeHeadings\n    let rows = []\n    let i\n    let x\n    let str\n    let link\n\n    const defaults = {\n        download: true,\n        skipColumn: [],\n        tableName: \"myTable\"\n    }\n\n    // Check for the options object\n    if (!isObject(userOptions)) {\n        return false\n    }\n\n    const options = {\n        ...defaults,\n        ...userOptions\n    }\n\n    // Selection or whole table\n    if (options.selection) {\n        // Page number\n        if (!isNaN(options.selection)) {\n            rows = rows.concat(dataTable.pages[options.selection - 1])\n        } else if (Array.isArray(options.selection)) {\n            // Array of page numbers\n            for (i = 0; i < options.selection.length; i++) {\n                rows = rows.concat(dataTable.pages[options.selection[i] - 1])\n            }\n        }\n    } else {\n        rows = rows.concat(dataTable.activeRows)\n    }\n\n    // Only proceed if we have data\n    if (rows.length) {\n        // Begin INSERT statement\n        str = `INSERT INTO \\`${options.tableName}\\` (`\n\n        // Convert table headings to column names\n        for (i = 0; i < headers.length; i++) {\n            // Check for column skip and column visibility\n            if (\n                !options.skipColumn.includes(headers[i].originalCellIndex) &&\n                dataTable.columns.visible(headers[i].originalCellIndex)\n            ) {\n                str += `\\`${headers[i].textContent}\\`,`\n            }\n        }\n\n        // Remove trailing comma\n        str = str.trim().substring(0, str.length - 1)\n\n        // Begin VALUES\n        str += \") VALUES \"\n\n        // Iterate rows and convert cell data to column values\n        for (i = 0; i < rows.length; i++) {\n            str += \"(\"\n\n            for (x = 0; x < rows[i].cells.length; x++) {\n                // Check for column skip and column visibility\n                if (\n                    !options.skipColumn.includes(headers[x].originalCellIndex) &&\n                    dataTable.columns.visible(headers[x].originalCellIndex)\n                ) {\n                    str += `\"${rows[i].cells[x].textContent}\",`\n                }\n            }\n\n            // Remove trailing comma\n            str = str.trim().substring(0, str.length - 1)\n\n            // end VALUES\n            str += \"),\"\n        }\n\n        // Remove trailing comma\n        str = str.trim().substring(0, str.length - 1)\n\n        // Add trailing colon\n        str += \";\"\n\n        if (options.download) {\n            str = `data:application/sql;charset=utf-8,${str}`\n        }\n\n        // Download\n        if (options.download) {\n            // Create a link to trigger the download\n            link = document.createElement(\"a\")\n            link.href = encodeURI(str)\n            link.download = `${options.filename || \"datatable_export\"}.sql`\n\n            // Append the link\n            document.body.appendChild(link)\n\n            // Trigger the download\n            link.click()\n\n            // Remove the link\n            document.body.removeChild(link)\n        }\n\n        return str\n    }\n\n    return false\n}\n","import {\n    isObject\n} from \"../helpers\"\n\n/**\n * Export table to TXT\n * @param {DataTable} dataTable DataTable instance.\n * @param {Object} userOptions User options\n * @return {Boolean}\n */\nexport const exportTXT = function(dataTable, userOptions = {}) {\n    if (!dataTable.hasHeadings && !dataTable.hasRows) return false\n\n    const headers = dataTable.activeHeadings\n    let rows = []\n    let i\n    let x\n    let str\n    let link\n\n    const defaults = {\n        download: true,\n        skipColumn: []\n    }\n\n    // Check for the options object\n    if (!isObject(userOptions)) {\n        return false\n    }\n\n    const options = {\n        ...defaults,\n        ...userOptions\n    }\n\n    // Include headings\n    rows[0] = dataTable.header\n\n    // Selection or whole table\n    if (options.selection) {\n        // Page number\n        if (!isNaN(options.selection)) {\n            rows = rows.concat(dataTable.pages[options.selection - 1])\n        } else if (Array.isArray(options.selection)) {\n            // Array of page numbers\n            for (i = 0; i < options.selection.length; i++) {\n                rows = rows.concat(dataTable.pages[options.selection[i] - 1])\n            }\n        }\n    } else {\n        rows = rows.concat(dataTable.activeRows)\n    }\n\n    // Only proceed if we have data\n    if (rows.length) {\n        str = \"\"\n\n        for (i = 0; i < rows.length; i++) {\n            for (x = 0; x < rows[i].cells.length; x++) {\n                // Check for column skip and visibility\n                if (\n                    !options.skipColumn.includes(headers[x].originalCellIndex) &&\n                    dataTable.columns.visible(headers[x].originalCellIndex)\n                ) {\n                    let text = rows[i].cells[x].textContent\n                    text = text.trim()\n                    text = text.replace(/\\s{2,}/g, \" \")\n                    text = text.replace(/\\n/g, \"  \")\n                    text = text.replace(/\"/g, \"\\\"\\\"\")\n                    //have to manually encode \"#\" as encodeURI leaves it as is.\n                    text = text.replace(/#/g, \"%23\")\n                    if (text.includes(\",\"))\n                        text = `\"${text}\"`\n\n\n                    str += text + options.columnDelimiter\n                }\n            }\n            // Remove trailing column delimiter\n            str = str.trim().substring(0, str.length - 1)\n\n            // Apply line delimiter\n            str += options.lineDelimiter\n        }\n\n        // Remove trailing line delimiter\n        str = str.trim().substring(0, str.length - 1)\n\n        if (options.download) {\n            str = `data:text/csv;charset=utf-8,${str}`\n        }\n        // Download\n        if (options.download) {\n            // Create a link to trigger the download\n            link = document.createElement(\"a\")\n            link.href = encodeURI(str)\n            link.download = `${options.filename || \"datatable_export\"}.txt`\n\n            // Append the link\n            document.body.appendChild(link)\n\n            // Trigger the download\n            link.click()\n\n            // Remove the link\n            document.body.removeChild(link)\n        }\n\n        return str\n    }\n\n    return false\n}\n","/**\n* Default config\n* @type {Object}\n*/\nexport const defaultConfig = {\n    classes: {\n        row: \"dataTable-editor-row\",\n        form: \"dataTable-editor-form\",\n        item: \"dataTable-editor-item\",\n        menu: \"dataTable-editor-menu\",\n        save: \"dataTable-editor-save\",\n        block: \"dataTable-editor-block\",\n        close: \"dataTable-editor-close\",\n        inner: \"dataTable-editor-inner\",\n        input: \"dataTable-editor-input\",\n        label: \"dataTable-editor-label\",\n        modal: \"dataTable-editor-modal\",\n        action: \"dataTable-editor-action\",\n        header: \"dataTable-editor-header\",\n        wrapper: \"dataTable-editor-wrapper\",\n        editable: \"dataTable-editor-editable\",\n        container: \"dataTable-editor-container\",\n        separator: \"dataTable-editor-separator\"\n    },\n\n    labels: {\n        editCell: \"Edit Cell\",\n        editRow: \"Edit Row\",\n        removeRow: \"Remove Row\",\n        reallyRemove: \"Are you sure?\"\n    },\n\n    // include hidden columns in the editor\n    hiddenColumns: false,\n\n    // enable the context menu\n    contextMenu: true,\n\n    // event to start editing\n    clickEvent: \"dblclick\",\n\n    // indexes of columns not to be edited\n    excludeColumns: [],\n\n    // set the context menu items\n    menuItems: [\n        {\n            text: editor => editor.options.labels.editCell,\n            action: (editor, _event) => {\n                const cell = editor.event.target.closest(\"td\")\n                return editor.editCell(cell)\n            }\n        },\n        {\n            text: editor => editor.options.labels.editRow,\n            action: (editor, _event) => {\n                const row = editor.event.target.closest(\"tr\")\n                return editor.editRow(row)\n            }\n        },\n        {\n            separator: true\n        },\n        {\n            text: editor => editor.options.labels.removeRow,\n            action: (editor, _event) => {\n                if (confirm(editor.options.labels.reallyRemove)) {\n                    const row = editor.event.target.closest(\"tr\")\n                    editor.removeRow(row)\n                }\n            }\n        }\n    ]\n}\n","import {\n    createElement\n} from \"../helpers\"\n\nimport {\n    defaultConfig\n} from \"./config\"\nimport {\n    debounce\n} from \"./helpers\"\n\n/**\n * Main lib\n * @param {Object} dataTable Target dataTable\n * @param {Object} options User config\n */\nexport class Editor {\n    constructor(dataTable, options = {}) {\n        this.dataTable = dataTable\n        this.options = {\n            ...defaultConfig,\n            ...options\n        }\n    }\n\n    /**\n     * Init instance\n     * @return {Void}\n     */\n    init() {\n        if (this.initialized) {\n            return\n        }\n        this.dataTable.wrapper.classList.add(this.options.classes.editable)\n        if (this.options.contextMenu) {\n            this.container = createElement(\"div\", {\n                id: this.options.classes.container\n            })\n            this.wrapper = createElement(\"div\", {\n                class: this.options.classes.wrapper\n            })\n            this.menu = createElement(\"ul\", {\n                class: this.options.classes.menu\n            })\n            if (this.options.menuItems && this.options.menuItems.length) {\n                this.options.menuItems.forEach(item => {\n                    const li = createElement(\"li\", {\n                        class: item.separator ? this.options.classes.separator : this.options.classes.item\n                    })\n                    if (!item.separator) {\n                        const a = createElement(\"a\", {\n                            class: this.options.classes.action,\n                            href: item.url || \"#\",\n                            html: typeof item.text === \"function\" ? item.text(this) : item.text\n                        })\n                        li.appendChild(a)\n                        if (item.action && typeof item.action === \"function\") {\n                            a.addEventListener(\"click\", event => {\n                                event.preventDefault()\n                                item.action(this, event)\n                            })\n                        }\n                    }\n                    this.menu.appendChild(li)\n                })\n            }\n            this.wrapper.appendChild(this.menu)\n            this.container.appendChild(this.wrapper)\n            this.update()\n        }\n        this.data = {}\n        this.closed = true\n        this.editing = false\n        this.editingRow = false\n        this.editingCell = false\n        this.bindEvents()\n        setTimeout(() => {\n            this.initialized = true\n            this.dataTable.emit(\"editable.init\")\n        }, 10)\n    }\n\n    /**\n     * Bind events to DOM\n     * @return {Void}\n     */\n    bindEvents() {\n        this.events = {\n            context: this.context.bind(this),\n            update: this.update.bind(this),\n            dismiss: this.dismiss.bind(this),\n            keydown: this.keydown.bind(this),\n            click: this.click.bind(this)\n        }\n        // listen for click / double-click\n        this.dataTable.body.addEventListener(this.options.clickEvent, this.events.click)\n        // listen for click anywhere but the menu\n        document.addEventListener(\"click\", this.events.dismiss)\n        // listen for right-click\n        document.addEventListener(\"keydown\", this.events.keydown)\n        if (this.options.contextMenu) {\n            // listen for right-click\n\n            this.dataTable.body.addEventListener(\"contextmenu\", this.events.context)\n            // reset\n            this.events.reset = debounce(this.events.update, 50)\n            window.addEventListener(\"resize\", this.events.reset)\n            window.addEventListener(\"scroll\", this.events.reset)\n        }\n    }\n\n    /**\n     * contextmenu listener\n     * @param  {Object} event Event\n     * @return {Void}\n     */\n    context(event) {\n        this.event = event\n        const valid = this.dataTable.body.contains(event.target)\n        if (this.options.contextMenu && !this.disabled && valid) {\n            event.preventDefault()\n            // get the mouse position\n            let x = event.pageX\n            let y = event.pageY\n            // check if we're near the right edge of window\n            if (x > this.limits.x) {\n                x -= this.rect.width\n            }\n            // check if we're near the bottom edge of window\n            if (y > this.limits.y) {\n                y -= this.rect.height\n            }\n            this.wrapper.style.top = `${y}px`\n            this.wrapper.style.left = `${x}px`\n            this.openMenu()\n            this.update()\n        }\n    }\n\n    /**\n     * dblclick listener\n     * @param  {Object} event Event\n     * @return {Void}\n     */\n    click(event) {\n        if (this.editing && this.data && this.editingCell) {\n            this.saveCell()\n        } else if (!this.editing) {\n            const cell = event.target.closest(\"td\")\n            if (cell) {\n                this.editCell(cell)\n                event.preventDefault()\n            }\n        }\n    }\n\n    /**\n     * keydown listener\n     * @param  {Object} event Event\n     * @return {Void}\n     */\n    keydown(event) {\n        if (this.modal) {\n            if (event.key === \"Escape\") { // close button\n                this.closeModal()\n            } else if (event.key === \"Enter\") { // save button\n                // Save\n                this.saveRow()\n            }\n        } else if (this.editing && this.data) {\n            if (event.key === \"Enter\") {\n                // Enter key saves\n                if (this.editingCell) {\n                    this.saveCell()\n                } else if (this.editingRow) {\n                    this.saveRow()\n                }\n            } else if (event.key === \"Escape\") {\n                // Escape key reverts\n                this.saveCell(this.data.content)\n            }\n        }\n    }\n\n    /**\n     * Edit cell\n     * @param  {Object} cell    The HTMLTableCellElement\n     * @return {Void}\n     */\n    editCell(cell) {\n        if (this.options.excludeColumns.includes(cell.cellIndex)) {\n            this.closeMenu()\n            return\n        }\n        const row = this.dataTable.body.rows[cell.parentNode.dataIndex]\n        cell = row.cells[cell.cellIndex]\n        this.data = {\n            cell,\n            content: cell.dataset.content || cell.innerHTML,\n            input: createElement(\"input\", {\n                type: \"text\",\n                value: cell.dataset.content || cell.innerHTML,\n                class: this.options.classes.input\n            })\n        }\n        cell.innerHTML = \"\"\n        cell.appendChild(this.data.input)\n        setTimeout(() => {\n            this.data.input.focus()\n            this.data.input.selectionStart = this.data.input.selectionEnd = this.data.input.value.length\n            this.editing = true\n            this.editingCell = true\n            this.closeMenu()\n        }, 10)\n    }\n\n    /**\n     * Save edited cell\n     * @param  {Object} row    The HTMLTableCellElement\n     * @param  {String} value   Cell content\n     * @return {Void}\n     */\n    saveCell(value, cell) {\n        cell = cell || this.data.cell\n        value = value || this.data.input.value\n        const oldData = this.data.content\n        // Set the cell content\n        this.dataTable.data[cell.parentNode.dataIndex].cells[cell.cellIndex].innerHTML = cell.innerHTML = value.trim()\n        this.data = {}\n        this.editing = this.editingCell = false\n        this.dataTable.emit(\"editable.save.cell\", value, oldData, cell)\n    }\n\n    /**\n     * Edit row\n     * @param  {Object} cell    The HTMLTableRowElement\n     * @return {Void}\n     */\n    editRow(row) {\n        row = row || this.event.target.closest(\"tr\")\n        if (!row || row.nodeName !== \"TR\" || this.editing) return\n        row = this.dataTable.body.rows[row.dataIndex]\n        const template = [\n            `<div class='${this.options.classes.inner}'>`,\n            `<div class='${this.options.classes.header}'>`,\n            \"<h4>Editing row</h4>\",\n            `<button class='${this.options.classes.close}' type='button' data-editor-close>×</button>`,\n            \" </div>\",\n            `<div class='${this.options.classes.block}'>`,\n            `<form class='${this.options.classes.form}'>`,\n            `<div class='${this.options.classes.row}'>`,\n            `<button class='${this.options.classes.save}' type='button' data-editor-save>Save</button>`,\n            \"</div>\",\n            \"</form>\",\n            \"</div>\",\n            \"</div>\"\n        ].join(\"\")\n        const modal = createElement(\"div\", {\n            class: this.options.classes.modal,\n            html: template\n        })\n        const inner = modal.firstElementChild\n        const form = inner.lastElementChild.firstElementChild\n        // Add the inputs for each cell\n        Array.from(row.cells).forEach((cell, i) => {\n            if ((!cell.hidden || (cell.hidden && this.options.hiddenColumns)) && !this.options.excludeColumns.includes(i)) {\n                form.insertBefore(createElement(\"div\", {\n                    class: this.options.classes.row,\n                    html: [\n                        `<div class='${this.options.classes.row}'>`,\n                        `<label class='${this.options.classes.label}'>${this.dataTable.header.cells[i].textContent}</label>`,\n                        `<input class='${this.options.classes.input}' value='${cell.dataset.content || cell.innerHTML}' type='text'>`,\n                        \"</div>\"\n                    ].join(\"\")\n                }), form.lastElementChild)\n            }\n        })\n        this.modal = modal\n        this.openModal()\n        // Grab the inputs\n        const inputs = Array.from(form.elements)\n        // Remove save button\n        inputs.pop()\n        this.data = {\n            row,\n            inputs\n        }\n        this.editing = true\n        this.editingRow = true\n        // Close / save\n        modal.addEventListener(\"click\", event => {\n            if (event.target.hasAttribute(\"data-editor-close\")) { // close button\n                this.closeModal()\n            } else if (event.target.hasAttribute(\"data-editor-save\")) { // save button\n                // Save\n                this.saveRow()\n            }\n        })\n        this.closeMenu()\n    }\n\n    /**\n     * Save edited row\n     * @param  {Object} row    The HTMLTableRowElement\n     * @param  {Array} data   Cell data\n     * @return {Void}\n     */\n    saveRow(data, row) {\n        data = data || this.data.inputs.map(input => input.value.trim())\n        row = row || this.data.row\n        // Store the old data for the emitter\n        const oldData = Array.from(row.cells).map(cell => cell.dataset.content || cell.innerHTML)\n        Array.from(row.cells).forEach((cell, i) => {\n            cell.innerHTML = data[i]\n        })\n        this.closeModal()\n        this.dataTable.emit(\"editable.save.row\", data, oldData, row)\n    }\n\n    /**\n     * Open the row editor modal\n     * @return {Void}\n     */\n    openModal() {\n        if (!this.editing && this.modal) {\n            document.body.appendChild(this.modal)\n        }\n    }\n\n    /**\n     * Close the row editor modal\n     * @return {Void}\n     */\n    closeModal() {\n        if (this.editing && this.modal) {\n            document.body.removeChild(this.modal)\n            this.modal = this.editing = this.editingRow = false\n        }\n    }\n\n    /**\n     * Remove a row\n     * @param  {Number|Object} row The HTMLTableRowElement or dataIndex property\n     * @return {Void}\n     */\n    removeRow(row) {\n        if (!row) {\n            row = this.event.target.closest(\"tr\")\n            if (row && row.dataIndex !== undefined) {\n                this.dataTable.rows.remove(row.dataIndex)\n                this.closeMenu()\n            }\n        } else {\n            // User passed a HTMLTableRowElement\n            if (row instanceof Element && row.nodeName === \"TR\" && row.dataIndex !== undefined) {\n                row = row.dataIndex\n            }\n            this.dataTable.rows.remove(row)\n            this.closeMenu()\n        }\n    }\n\n    /**\n     * Update context menu position\n     * @return {Void}\n     */\n    update() {\n        const scrollX = window.scrollX || window.pageXOffset\n        const scrollY = window.scrollY || window.pageYOffset\n        this.rect = this.wrapper.getBoundingClientRect()\n        this.limits = {\n            x: window.innerWidth + scrollX - this.rect.width,\n            y: window.innerHeight + scrollY - this.rect.height\n        }\n    }\n\n    /**\n     * Dismiss the context menu\n     * @param  {Object} event Event\n     * @return {Void}\n     */\n    dismiss(event) {\n        let valid = true\n        if (this.options.contextMenu) {\n            valid = !this.wrapper.contains(event.target)\n            if (this.editing) {\n                valid = !this.wrapper.contains(event.target) && event.target !== this.data.input\n            }\n        }\n        if (valid) {\n            if (this.editingCell) {\n                // Revert\n                this.saveCell(this.data.content)\n            }\n            this.closeMenu()\n        }\n    }\n\n    /**\n     * Open the context menu\n     * @return {Void}\n     */\n    openMenu() {\n        if (this.editing && this.data && this.editingCell) {\n            this.saveCell()\n        }\n        if (this.options.contextMenu) {\n            document.body.appendChild(this.container)\n            this.closed = false\n            this.dataTable.emit(\"editable.context.open\")\n        }\n    }\n\n    /**\n     * Close the context menu\n     * @return {Void}\n     */\n    closeMenu() {\n        if (this.options.contextMenu && !this.closed) {\n            this.closed = true\n            document.body.removeChild(this.container)\n            this.dataTable.emit(\"editable.context.close\")\n        }\n    }\n\n    /**\n     * Destroy the instance\n     * @return {Void}\n     */\n    destroy() {\n        this.dataTable.body.removeEventListener(this.options.clickEvent, this.events.click)\n        this.dataTable.body.removeEventListener(\"contextmenu\", this.events.context)\n        document.removeEventListener(\"click\", this.events.dismiss)\n        document.removeEventListener(\"keydown\", this.events.keydown)\n        window.removeEventListener(\"resize\", this.events.reset)\n        window.removeEventListener(\"scroll\", this.events.reset)\n        if (document.body.contains(this.container)) {\n            document.body.removeChild(this.container)\n        }\n        this.initialized = false\n    }\n}\n\nexport const makeEditable = function(dataTable, options = {}) {\n    const editor = new Editor(dataTable, options)\n    if (dataTable.initialized) {\n        editor.init()\n    } else {\n        dataTable.on(\"datatable.init\", () => editor.init())\n    }\n\n    return editor\n}\n","// Source: https://www.freecodecamp.org/news/javascript-debounce-example/\n\nexport const debounce = function(func, timeout = 300) {\n    let timer\n    return (...args) => {\n        clearTimeout(timer)\n        timer = setTimeout(() => {\n            func.apply(this, args)\n        }, timeout)\n    }\n}\n"],"names":["isObject","val","Object","prototype","toString","call","isJson","str","t","JSON","parse","e","Array","isArray","createElement","nodeName","attrs","dom","document","attr","innerHTML","setAttribute","flush","el","NodeList","forEach","button","className","page","text","class","html","sortItems","a","b","c","d","length","f","value","g","h","i","Rows","constructor","dt","this","cursor","build","row","tr","headings","map","td","data","appendChild","setCursor","oldCursor","from","rows","classList","remove","add","options","scrollY","scrollIntoView","block","emit","render","push","hasRows","update","columns","rebuild","select","sort","splice","dataIndex","findRowIndex","columnIndex","findIndex","children","innerText","toLowerCase","includes","String","findRow","index","cols","cells","r","updateRow","Columns","swap","x","y","order","s","cell","temp","column","getAttribute","cloneNode","originalCellIndex","sortable","hiddenColumns","searchIndex","undefined","activeHeadings","activeRows","hide","show","indexOf","visible","th","isNaN","insert","heading","hiddenHeader","type","format","hasOwnProperty","renderHeader","removeChild","filter","dir","init","terms","filterState","originalData","filters","rowFilter","filteredRows","content","hasAttribute","clear","setMessage","labels","noRows","hasHeadings","filterTerms","textContent","sorting","alpha","numeric","n","waitFor","import","then","parseDate","date","Promise","all","importedFunctions","parseFunction","top","btm","num","replace","parseFloat","Number","contains","lastTh","removeAttribute","concat","indexes","v","searchData","selectedColumns","columnRenderers","parentNode","cellIndex","renderer","dataToTable","thead","tbody","col","Error","tHead","tBodies","defaultConfig","searchable","paging","perPage","perPageSelect","nextPrev","firstLast","prevText","nextText","firstText","lastText","ellipsisText","ascText","descText","truncatePager","pagerDelta","fixedColumns","fixedHeight","header","footer","tabIndex","rowNavigation","placeholder","noResults","info","layout","bottom","DataTable","table","querySelector","initialized","initialLayout","initialSortable","listeners","onResize","event","assign","currentPage","onFirstPage","setTimeout","template","body","head","foot","tFoot","insertBefore","slice","wrapper","wrap","selected","option","Option","outerHTML","form","paginatorWrapper","paginator","container","pagers","querySelectorAll","label","replaceChild","rect","getBoundingClientRect","setColumns","fixHeight","fixColumns","bindEvents","renderPage","lastRowCursor","totalPages","frag","createDocumentFragment","pages","onLastPage","lastPage","items","current","searching","string","renderPager","prev","next","pager","links","ellipsis","j","k","l","truncate","p","firstElementChild","link","href","selector","addEventListener","parseInt","input","search","target","closest","preventDefault","key","previousElementSibling","stopPropagation","nextElementSibling","matches","find","window","width","ajax","hidden","destroy","removeEventListener","paginate","hd","columnWidths","style","height","headerTable","totalOffsetWidth","reduce","total","offsetWidth","ow","w","paddingTop","paddingBottom","border","parentElement","headercontainer","thd","paddingRight","clientWidth","scrollHeight","clientHeight","overflowY","widths","query","idx","inArray","split","bool","word","sortColumn","direction","entries","refresh","parent","print","open","message","colspan","on","callback","events","off","apply","arguments","convertCSV","userOptions","obj","lineDelimiter","columnDelimiter","removeDoubleQuotes","trim","shift","values","convertJSON","json","console","warn","exportCSV","dataTable","headers","download","skipColumn","selection","substring","encodeURI","filename","click","exportJSON","arr","replacer","space","stringify","exportSQL","tableName","exportTXT","classes","item","menu","save","close","inner","modal","action","editable","separator","editCell","editRow","removeRow","reallyRemove","contextMenu","clickEvent","excludeColumns","menuItems","editor","_event","confirm","Editor","id","li","url","closed","editing","editingRow","editingCell","context","bind","dismiss","keydown","reset","func","timeout","timer","args","clearTimeout","debounce","valid","disabled","pageX","pageY","limits","left","openMenu","saveCell","closeModal","saveRow","closeMenu","dataset","focus","selectionStart","selectionEnd","oldData","join","lastElementChild","openModal","inputs","elements","pop","Element","scrollX","pageXOffset","pageYOffset","innerWidth","innerHeight","makeEditable"],"mappings":"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"}